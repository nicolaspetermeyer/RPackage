data_cust <- fread("data_customer.csv")
library(data.table)
data_cust <- fread("data_customer.csv")
library(data.table)
data_cust <- fread("data_customer.csv")
data_pers <- fread("data_personal.csv")
data_merge <- merge(data_cust, data_pers, by = "CustomerId")
data_merge$Gender <- as.factor(data_merge$Gender)
data_merge$Exited <- as.factor(data_merge$Exited)
View(data_merge)
ChurnPrediction(data_merge, 15565701)
churnPrediction <- function(data, id) {
Exit <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance  + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, family = binomial, data = data)
cust <- data[data$CustomerId == id,]
predict <- predict(Exit, cust, type="response")
}
churnPrediction(data_merge, 15565701)
churnPrediction <- function(data, id) {
Exit <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance  + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, family = binomial, data = data)
cust <- data[data$CustomerId == id,]
predict <- predict(Exit, cust, type="response")
return(predict)
}
churnPrediction(data_merge, 15565701)
Exit <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance  + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, family = binomial, data = data_merge)
summary(Exit)
data_merge$prediction <- predict(Exit, data_merge, type="response")
data_merge$CustomerId[data_merge$prediction == max(data_merge$prediction)]
data_merge$CustomerId[data_merge$prediction == min(data_merge$prediction)]
avg_men <- mean(data_merge$prediction[data_merge$Gender == "Male"])
avg_women <- mean(data_merge$prediction[data_merge$Gender == "Female"])
View(data_merge)
churnPrediction(data_merge, 15565706)
View(data_merge)
churnPrediction <- function(data, id) {
#check if customer id exists
if (!id %in% data$CustomerId) {
stop("Customer ID not found")
}
Exit <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance  + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, family = binomial, data = data)
cust <- data[data$CustomerId == id,]
predict <- predict(Exit, cust, type="response")
return(predict)
}
churnPrediction(data_merge, 1)
library(ChurnPrediction)
library(churnPrediction)
install.package("churnPrediction")
install.packages("churnPrediction")
library(churnPrediction)
library(ChurnPrediction)
getwd()
library(ChurnPrediction)
library(churnPrediction)
library(ChurnPrediction)
setwd("D:/OneDrive - Universit채t Z체rich UZH/4 - Semester/Introduction to R/Day 5")
data_cust <- fread("data_customer.csv")
data_pers <- fread("data_personal.csv")
data_merge <- merge(data_cust, data_pers, by = "CustomerId")
data_merge$Gender <- as.factor(data_merge$Gender)
data_merge$Exited <- as.factor(data_merge$Exited)
data_cust <- fread("data_customer.csv")
data_pers <- fread("data_personal.csv")
data_merge <- merge(data_cust, data_pers, by = "CustomerId")
data_merge$Gender <- as.factor(data_merge$Gender)
data_merge$Exited <- as.factor(data_merge$Exited)
churnPrediction(data_merge, 1)
churnPrediction(data_merge, 15565701)
setwd("D:/R/Git-Test/ChurnPrediction")
usethis::use_testthat()
test_that()
help(test_that)
library(ChurnPrediction)
churnPrediction(data_merge, 15565701)
churnPrediction(data_merge, 1)
churnPrediction(data_merge, 15565706)
library(ChurnPrediction)
test()
devtools::test()
data_merge$CustomerId[data_merge$prediction == max(data_merge$prediction)]
data_merge$CustomerId[data_merge$prediction == min(data_merge$prediction)]
data_merge$CustomerId[data_merge$prediction == max(data_merge$prediction)]
summary(Exit)
Exit <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance  + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, family = binomial, data = data_merge)
data_merge$prediction <- predict(Exit, data_merge, type="response")
data_merge$CustomerId[data_merge$prediction == max(data_merge$prediction)]
data_merge$CustomerId[data_merge$prediction == min(data_merge$prediction)]
churnPrediction(data_merge, 15653251)
churnPrediction(data_merge, 15662641)
library(ChurnPrediction)
devtools::test()
devtools::test()
library(ChurnPrediction)
devtools::test()
devtools::test()
library(ChurnPrediction)
sort <- data_merge$prediction[order(data_merge$prediction, decreasing = TRUE)]
sort
data_merge$prediction[order(data_merge$prediction, decreasing = TRUE)][1:100]
shiny::runApp('CustomerChurn')
runApp('CustomerChurn')
runApp('CustomerChurn')
zips <- as.matrix(data_merge[1:10000, list(zip_longitude, zip_latitude)])
View(zips)
top_100 <- data_merge$prediction[order(data_merge$prediction, decreasing = TRUE)][1:100]
help("as.matrix")
top_100 <- data_merge[order(data_merge$prediction, decreasing = TRUE)][1:100]
zips <- as.matrix(data_merge[1:100, list(zip_longitude, zip_latitude)])
View(zips)
runApp('CustomerChurn')
View(data_merge)
runApp('CustomerChurn')
runApp('CustomerChurn')
runApp('CustomerChurn')
View(top_100)
runApp('CustomerChurn')
runApp('CustomerChurn')
runApp('CustomerChurn')
runApp('CustomerChurn')
churnPrediction(data_merge, 15653251)
runApp('CustomerChurn')
runApp('CustomerChurn')
runApp('CustomerChurn')
runApp('CustomerChurn')
runApp('CustomerChurn')
getwd()
rsconnect::deployApp("D:/R/Git-Test/ChurnPrediction/CustomerChurn")
runApp('D:/OneDrive - Universit채t Z체rich UZH/4 - Semester/Introduction to R/Day 5/CustomerChurn')
getwd()
